# Load the trained model (if not already loaded)
model.load_state_dict(torch.load('median_filter_net.pth'))
model.eval()

def segment_moving_objects(current_frame, approximated_median_frame, threshold=0.1):
    diff = np.abs(current_frame - approximated_median_frame)
    _, binary_mask = cv2.threshold(diff, threshold, 1, cv2.THRESH_BINARY)
    return binary_mask

# Example usage with a new frame
new_frame = np.random.rand(1, 256, 256).astype(np.float32)  # Replace with actual new frame
new_frame_tensor = torch.tensor(new_frame)

with torch.no_grad():
    approximated_median = model(new_frame_tensor.unsqueeze(0)).squeeze(0).numpy()

binary_mask = segment_moving_objects(new_frame[0], approximated_median[0])

# Display the results
import matplotlib.pyplot as plt

plt.subplot(1, 3, 1)
plt.title('Original Frame')
plt.imshow(new_frame[0], cmap='gray')

plt.subplot(1, 3, 2)
plt.title('Approximated Median Frame')
plt.imshow(approximated_median[0], cmap='gray')

plt.subplot(1, 3, 3)
plt.title('Binary Mask')
plt.imshow(binary_mask, cmap='gray')

plt.show()
